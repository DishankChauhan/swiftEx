generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for type safety
enum TransactionStatus {
  pending
  confirmed
  failed
  cancelled
}

enum OrderType {
  market
  limit
  stop
}

enum OrderSide {
  buy
  sell
}

enum OrderStatus {
  pending
  partial
  filled
  cancelled
  rejected
}

enum TimeInForce {
  GTC  // Good Till Cancelled
  IOC  // Immediate Or Cancel
  FOK  // Fill Or Kill
}

enum LedgerEntryType {
  deposit
  withdrawal
  trade
  fee
  lock
  unlock
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  is2FAEnabled    Boolean   @default(false)
  secret2FA       String?
  kycStatus       String    @default("pending") // pending, approved, rejected
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  sessions        Session[]
  wallets         Wallet[]
  transactions    Transaction[]
  balances        Balance[]
  orders          Order[]
  ledgerEntries   LedgerEntry[]
  connectedWallets ConnectedWallet[]

  @@map("users")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String  @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String
  chain       String   // "solana" or "ethereum"
  address     String   @unique
  type        String   // "deposit" or "withdrawal"
  privateKey  String?  // Encrypted private key (for withdrawal wallets)
  publicKey   String?  // Public key for verification
  derivationPath String? // HD wallet derivation path
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  walletId    String?
  txHash      String?  @unique
  chain       String   // "solana" or "ethereum"
  txType      String   // "deposit", "withdrawal", "internal"
  status      TransactionStatus @default(pending) // pending, confirmed, failed, cancelled
  amount      String   // Using string to handle large numbers and decimals
  asset       String   // "SOL", "ETH", "USDC", etc.
  fromAddress String?
  toAddress   String?
  blockNumber String?
  gasUsed     String?
  gasPrice    String?
  fee         String?  // Transaction fee
  confirmations Int    @default(0)
  metadata    Json?    // Additional transaction data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet?  @relation(fields: [walletId], references: [id])
  ledgerEntries LedgerEntry[]

  @@map("transactions")
}

model Balance {
  id          String   @id @default(cuid())
  userId      String
  asset       String   // "SOL", "ETH", "USDC", etc.
  chain       String   // "solana" or "ethereum"
  available   String   @default("0") // Available for trading/withdrawal
  locked      String   @default("0") // Locked in orders or pending withdrawals
  total       String   @default("0") // Total balance (available + locked)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, asset, chain])
  @@map("balances")
}

// Phase 3: Internal Ledger System Models

model AssetConfig {
  id              String   @id @default(cuid())
  symbol          String   @unique // "SOL", "ETH", "USDC"
  name            String   // "Solana", "Ethereum", "USD Coin"
  decimals        Int      // 9 for SOL, 18 for ETH, 6 for USDC
  chain           String   // "solana" or "ethereum"
  contractAddress String?  // For tokens (null for native assets)
  isActive        Boolean  @default(true)
  minDeposit      String   @default("0")
  minWithdrawal   String   @default("0")
  withdrawalFee   String   @default("0")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  baseAssetPairs  TradingPair[] @relation("BaseAsset")
  quoteAssetPairs TradingPair[] @relation("QuoteAsset")

  @@map("asset_configs")
}

model TradingPair {
  id           String   @id @default(cuid())
  symbol       String   @unique // "SOL/USDC", "ETH/USDC"
  baseAsset    String   // "SOL", "ETH"
  quoteAsset   String   // "USDC"
  isActive     Boolean  @default(true)
  minOrderSize String   // Minimum order size in base asset
  maxOrderSize String   // Maximum order size in base asset
  priceStep    String   // Minimum price increment
  sizeStep     String   // Minimum size increment
  makerFee     String   @default("0.001") // 0.1% maker fee
  takerFee     String   @default("0.001") // 0.1% taker fee
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  baseAssetConfig  AssetConfig @relation("BaseAsset", fields: [baseAsset], references: [symbol])
  quoteAssetConfig AssetConfig @relation("QuoteAsset", fields: [quoteAsset], references: [symbol])
  orders           Order[]

  @@map("trading_pairs")
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  tradingPair   String   // "SOL/USDC"
  orderType     OrderType   // "market", "limit", "stop"
  side          OrderSide   // "buy", "sell"
  amount        String   // Order amount in base asset
  price         String?  // Order price (null for market orders)
  stopPrice     String?  // Stop price for stop orders
  status        OrderStatus @default(pending) // pending, partial, filled, cancelled, rejected
  filled        String   @default("0") // Amount filled
  remaining     String   // Amount remaining to fill
  averagePrice  String?  // Average fill price
  timeInForce   TimeInForce @default(GTC) // GTC, IOC, FOK
  clientOrderId String?  // Client-provided order ID
  lockedAmount  String   // Amount locked for this order
  lockedAsset   String   // Asset locked (base for sell, quote for buy)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  filledAt      DateTime?
  cancelledAt   DateTime?

  // Relations
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingPairConfig TradingPair @relation(fields: [tradingPair], references: [symbol])
  fills        OrderFill[]
  ledgerEntries LedgerEntry[]

  @@map("orders")
}

model OrderFill {
  id         String   @id @default(cuid())
  orderId    String
  amount     String   // Amount filled
  price      String   // Fill price
  fee        String   // Fee charged
  feeAsset   String   // Asset in which fee is charged
  isMaker    Boolean  // True if this order was the maker
  createdAt  DateTime @default(now())

  // Relations
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_fills")
}

model LedgerEntry {
  id            String   @id @default(cuid())
  userId        String
  orderId       String?  // Associated order (if applicable)
  transactionId String?  // Associated transaction (if applicable)
  entryType     LedgerEntryType   // "deposit", "withdrawal", "trade", "fee", "lock", "unlock"
  asset         String   // Asset affected
  amount        String   // Amount (positive for credit, negative for debit)
  balanceBefore String   // Balance before this entry
  balanceAfter  String   // Balance after this entry
  description   String?  // Human-readable description
  metadata      Json?    // Additional metadata
  createdAt     DateTime @default(now())

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  order        Order?       @relation(fields: [orderId], references: [id])
  transaction  Transaction? @relation(fields: [transactionId], references: [id])

  @@map("ledger_entries")
}

model ConnectedWallet {
  id          String   @id @default(cuid())
  userId      String
  address     String   @unique
  chain       String   // "solana" or "ethereum"
  verified    Boolean  @default(false)
  signature   String?  // Verification signature
  connectedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("connected_wallets")
} 