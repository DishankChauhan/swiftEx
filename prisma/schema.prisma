generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  is2FAEnabled    Boolean   @default(false)
  twoFASecret     String?
  kycStatus       String    @default("pending") // pending, approved, rejected
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  sessions        Session[]
  wallets         Wallet[]
  transactions    Transaction[]
  balances        Balance[]

  @@map("users")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  refreshToken String  @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String
  chain       String   // "solana" or "ethereum"
  address     String   @unique
  type        String   // "deposit" or "withdrawal"
  privateKey  String?  // Encrypted private key (for withdrawal wallets)
  publicKey   String?  // Public key for verification
  derivationPath String? // HD wallet derivation path
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  walletId    String?
  txHash      String?  @unique
  chain       String   // "solana" or "ethereum"
  txType      String   // "deposit", "withdrawal", "internal"
  status      String   @default("pending") // pending, confirmed, failed, cancelled
  amount      String   // Using string to handle large numbers and decimals
  asset       String   // "SOL", "ETH", "USDC", etc.
  fromAddress String?
  toAddress   String?
  blockNumber String?
  gasUsed     String?
  gasPrice    String?
  fee         String?  // Transaction fee
  confirmations Int    @default(0)
  metadata    Json?    // Additional transaction data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet?  @relation(fields: [walletId], references: [id])

  @@map("transactions")
}

model Balance {
  id          String   @id @default(cuid())
  userId      String
  asset       String   // "SOL", "ETH", "USDC", etc.
  chain       String   // "solana" or "ethereum"
  available   String   @default("0") // Available for trading/withdrawal
  locked      String   @default("0") // Locked in orders or pending withdrawals
  total       String   @default("0") // Total balance (available + locked)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, asset, chain])
  @@map("balances")
} 